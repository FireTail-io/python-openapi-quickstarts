openapi: 3.0.0
info:
  title: Social media API
  version: "0.1"
  description: Social media API
paths:
  /friends:
    get:
      tags:
        - friends
      operationId: main.get_friends
      summary: Get friends
      parameters:
        - $ref: "#/components/parameters/limit"
      responses:
        "200":
          $ref: "#/components/responses/Returnfriends"

        "401":
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - jwt: []

  /timeline:
    get:
      tags:
        - stories
      operationId: main.get_timeline
      summary: Get timeline
      parameters:
        - $ref: "#/components/parameters/limit"
      responses:
        "200":
          $ref: "#/components/responses/ReturnStorys"

        "401":
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - jwt: []

  "/friends/{friend_id}":
    get:
      tags:
        - friends
      operationId: main.get_friend
      summary: Get a single friend
      parameters:
        - $ref: "#/components/parameters/friend_id"
      responses:
        "200":
          description: Return friend
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Friend"
        "404":
          description: User does not exist
      security:
        - jwt: []

    put:
      tags:
        - friends
      operationId: main.put_friend
      summary: Add a friend
      parameters:
        - $ref: "#/components/parameters/friend_id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Friend"
      responses:
        "200":
          description: friend updated
        "201":
          description: New friend added
      security:
        - jwt: []
    delete:
      tags:
        - friends
      operationId: main.delete_friend
      summary: Delete a friend
      parameters:
        - $ref: "#/components/parameters/friend_id"
      responses:
        "204":
          description: friend was deleted
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: user does not exist
      security:
        - jwt: []


  "/story/{story_id}":
    get:
      tags:
        - stories
      operationId: main.get_story
      summary: Get a single story
      parameters:
        - $ref: "#/components/parameters/story_id"
      responses:
        "200":
          description: Return story
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Story"
        "404":
          description: story does not exist
      security:
        - jwt: []
    post:
      tags:
        - stories
      operationId: main.post_story
      summary: Add a story
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Story'
      responses:
        "200":
          description: story status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
      security:
        - jwt: []
    delete:
      tags:
        - stories
      operationId: main.delete_story
      summary: Delete a story
      responses:
        "204":
          description: story was deleted
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: story does not exist
      security:
        - jwt: []



  /auth/{user_id}:
    get:
      summary: Return JWT token
      operationId: jwtdecoder.generate_token
      parameters:
        - name: user_id
          description: User unique identifier
          in: path
          required: true
          example: 12
          schema:
            type: integer
      responses:
        "200":
          description: JWT token
          content:
            application/json:
              schema:
                type: object

  /secret:
    get:
      summary: Return secret string
      operationId: jwtdecoder.get_secret
      responses:
        "200":
          description: secret response
          content:
            "text/plain":
              schema:
                type: string
      security:
        - jwt: ["secret"]

  /healthz:
    get:
      operationId: main.health
      summary: Return status of server
      responses:
        "200":
          description: return status

components:
  parameters:
    limit:
      name: limit
      description: limit number of results
      in: query
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 100
    friend_id:
      name: friend_id
      description: friend Unique identifier
      in: path
      required: true
      schema:
        type: string
        pattern: ^[a-zA-Z0-9-]+$
    story_id:
      name: story_id
      description: story Unique identifier
      in: path
      required: true
      schema:
        type: string
        pattern: ^[a-zA-Z0-9-]+$
  responses:
    UnauthorizedError:
      description: API key is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
    Returnfriends:
      description: Return friends
      content:
        application/json:
          schema:
            type: object
            properties:
              friends:
                type: array
                items:
                  $ref: "#/components/schemas/Friend"
    ReturnStorys:
      description: Return storys
      content:
        application/json:
          schema:
            type: object
            properties:
              storys:
                type: array
                items:
                  $ref: "#/components/schemas/Story"
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: jwtdecoder.decode_token
  schemas:
    Message:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: message
          example: "success"
    Friend:
      type: object
      required:
        - friend_id
        - first_name
        - last_name
        - username
        - dob
        - state
        - postcode
      properties:
        friend_id:
          type: string
          description: Unique identifier
          example: "3"
          pattern: ^[a-zA-Z0-9-]+$
        first_name:
          type: string
          description: first name
          example: "Adam"
        last_name:
          type: string
          description: last name
          example: "Powers"
        username:
          type: string
          description: username
          example: "adamnpowers"
        dob:
          type: string
          format: date
          description: date of birth
          example: "2000-01-05"
        state:
          type: string
          description: state
          example: "Texas"
        postcode:
          type: string
          description: postal code
          example: "D08TY32"
    Story:
      type: object
      required:
        - username
        - story_id
      properties:
        username:
          type: string
          description: username
          example: lion423
        story_id:
          type: string
          description: story ID
          pattern: ^[a-zA-Z0-9-]+$
        story_content:
          type: string
          description: story content
          example: "New story"
        created:
          type: string
          format: date-time
          description: Creation time
          example: 2015-07-07T15:49:51.230+02:00
          readOnly: true
